# Даны значения величины заработной платы заемщиков банка (zp) и 
# значения их поведенческого кредитного скоринга (ks): 
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], 
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных 
# действий, а затем с помощью функции cov из numpy Полученные 
# значения должны быть равны. Найдите коэффициент корреляции 
# Пирсона с помощью ковариации и среднеквадратичных отклонений
# двух признаков, а затем с использованием функций из библиотек 
# numpy и pandas.

import numpy as np


# Даны значения:
zp = 35, 45, 190, 200, 40, 70, 54, 150, 120, 110
ks = 401, 574, 874, 919, 459, 739, 653, 902, 746, 832
meanzp = 101.4
# (35 + 45 + 190 + 200 + 40 + 70 + 54 + 150 + 120 + 110) / 10 = 101.4
meanks =709.9  
# (401 + 574 + 874 + 919 + 459 + 739 + 653 + 902 + 746 + 832) / 10 = 709.9
# differences = (x - mean_zp) * (y - mean_ks), for x, y in zip(zp, ks)
differences = (-66.4 * -308.9), (-56.4 * -134.9), (88.6 * 164.1), (98.6 * 209.1), 
(-61.4 * -250.9), (-31.4 * 29.1), (-47.4 * -56.9), (48.6 * 192.1), (18.6 * 36.1), (8.6 * 122.1)
covariance = sum(differences) / (len(zp) - 1)

# заданные значения
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# вычисление ковариации с использованием np.cov()
covariance_np = np.cov(zp, ks, ddof=1)[0, 1]

print("Ковариация (используя элементарные действия):", covariance)
print("Ковариация (используя np.cov()):", covariance_np)


# Обратите внимание на параметр ddof=1, который указывает использование 
# делителя n - 1 в формуле для несмещенной оценки ковариации.

# Теперь, для найденной ковариации, мы можем вычислить коэффициент 
# корреляции Пирсона с помощью среднеквадратичных отклонений двух признаков.

# вычисление среднеквадратичного отклонения
std_zp = np.std(zp, ddof=1)
std_ks = np.std(ks, ddof=1)

# вычисление коэффициента корреляции Пирсона с использованием ковариации и среднеквадратичных отклонений
correlation = covariance_np / (std_zp * std_ks)

print("Коэффициент корреляции Пирсона:", correlation)


# Также можно использовать функцию corrcoef() 
# из библиотеки NumPy или функцию corr() 
# из библиотеки pandas для нахождения коэффициента корреляции Пирсона:

# с использованием np.corrcoef()
correlation_np = np.corrcoef(zp, ks)[0, 1]

# с использованием метода corr() из pandas
import pandas as pd

df = pd.DataFrame({'zp': zp, 'ks': ks})
correlation_pd = df.corr().loc['zp', 'ks']

print("Коэффициент корреляции Пирсона (используя np.corrcoef()):", correlation_np)
print("Коэффициент корреляции Пирсона (используя метод corr() из pandas):", correlation_pd)
