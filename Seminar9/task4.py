# 2.Посчитать коэффициент линейной регрессии
# при заработной плате (zp), используя градиентный спуск (без intercept).

import numpy as np

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# Нормализуем признак
normalized_zp = (zp - np.mean(zp)) / np.std(zp)

# Градиентный спуск
learning_rate = 0.01  # Скорость обучения
num_iterations = 1000  # Количество итераций

# Инициализируем начальный коэффициент случайным числом
b = np.random.randn()

# Градиентный спуск
for i in range(num_iterations):
    # Вычисляем предсказание
    predicted_ks = b * normalized_zp

    # Вычисляем ошибку предсказания
    error = predicted_ks - ks

    # Обновляем коэффициенты согласно градиентному спуску
    b -= learning_rate * 2 * np.dot(normalized_zp, error) / len(zp)

print("Коэффициент линейной регрессии без перехвата (градиентный спуск):")
print("b =", b)


